#!/usr/bin/env bash
#
# @(#) mount.image
#
# Copyright Â© 2023 Revolution Robotics, Inc.
#
# This script mounts the partitions of a given (possibly compressed)
# disk image on mount points of the form:
#     ${MOUNT_IMAGE_BASEDIR}/label
# where $MOUNT_IMAGE_BASEDIR is either /media/$USER or
# /run/media/$USER, depending on the OS, and label is the partition
# label. If a mountable partition does not have a label, the name of
# the device associated with the partition is used instead.
#
# To unmount an image mounted with `mount.image', use the command
# `umount.image' with argument of either the image or one of the
# partition mount points.
#
#
: ${BASH_CMD:='@BASH_CMD@'}
: ${BZIP2_CMD:='@BZIP2_CMD@'}
: ${CAT_CMD:='@CAT_CMD@'}
: ${DMSETUP_CMD:='@DMSETUP_CMD@'}
: ${ED_CMD:='@ED_CMD@'}
: ${FINDMNT_CMD:='@FINDMNT_CMD@'}
: ${FLOCK_CMD:='@FLOCK_CMD@'}
: ${GETOPT_CMD:='@GETOPT_CMD@'}
: ${GREP_CMD:='@GREP_CMD@'}
: ${GZIP_CMD:='@GZIP_CMD@'}
: ${INSTALL_CMD:='@INSTALL_CMD@'}
: ${JQ_CMD:='@JQ_CMD@'}
: ${KPARTX_CMD:='@KPARTX_CMD@'}
: ${LOSETUP_CMD:='@LOSETUP_CMD@'}
: ${LSBLK_CMD:='@LSBLK_CMD@'}
: ${LVS_CMD:='@LVS_CMD@'}
: ${LZIP_CMD:='@LZIP_CMD@'}
: ${LZMA_CMD:='@LZMA_CMD@'}
: ${LZOP_CMD:='@LZOP_CMD@'}
: ${MKTEMP_CMD:='@MKTEMP_CMD@'}
: ${MOUNT_CMD:='@MOUNT_CMD@'}
: ${MV_CMD:='@MV_CMD@'}
: ${PARTPROBE_CMD:='@PARTPROBE_CMD@'}
: ${READLINK_CMD:='@READLINK_CMD@'}
: ${RM_CMD:='@RM_CMD@'}
: ${RMDIR_CMD:='@RMDIR_CMD@'}
: ${SED_CMD:='@SED_CMD@'}
: ${SEQ_CMD:='@SEQ_CMD@'}
: ${SLEEP_CMD:='@SLEEP_CMD@'}
: ${SUDO_CMD:='@SUDO_CMD@'}
: ${TR_CMD:='@TR_CMD@'}
: ${UMOUNT_CMD:='@UMOUNT_CMD@'}
: ${UNZIP_CMD:='@UNZIP_CMD@'}
: ${VGCHANGE_CMD:='@VGCHANGE_CMD@'}
: ${VGS_CMD:='@VGS_CMD@'}
: ${XZ_CMD:='@XZ_CMD@'}
: ${ZSTD_CMD:='@ZSTD_CMD@'}

: ${MOUNT_IMAGE_CACHE:='/run/mount/umount.restore'}
if test -d /run/media; then
    : ${MOUNT_IMAGE_BASEDIR:="/run/media/${USER}"}
else
    : ${MOUNT_IMAGE_BASEDIR:="/media/${USER}"}
fi

pr-info ()
{
    echo "$@" >&2
}

pr-warn ()
{
    echo "Warning: $@" >&2
}

pr-error ()
{
    echo "Error: $@" >&2
}

# OS-agnstoic readlink for existent files/directories.
resolve-existing ()
{
    if $READLINK_CMD --version 2>&1 | $GREP_CMD -q 'coreutils'; then
        $READLINK_CMD -e "$@"
    else
        $READLINK_CMD -f N "$@"
    fi
}

verify-input ()
{
    local prompt=$1

    local reply=''

    while [[ ! ."$reply" =~ \.([yY]|[nN]) ]]; do
        read -N 1 -p "$prompt" reply
        echo >&2
    done

    case $reply in
        [yY])
            return 0
            ;;
        [nN])
            return 1
            ;;
    esac
}

get-compression-specs ()
{
    local image=$1
    local -n compression_specs=$2

    case $(file "$image") in
        *bzip2*)
            compression_specs=( "$BZIP2_CMD -dc"  '.bz2' )
            ;;
        *lzip*)
            compression_specs=( "$LZIP_CMD -dc" '.lz' )
            ;;
        *LZMA*)
            compression_specs=( "$LZMA_CMD -dc" '.lzma' )
            ;;
        *lzop*)
            compression_specs=( "$LZOP_CMD -dc" '.lzo')
            ;;
        *gzip*)
            compression_specs=( "$GZIP_CMD -dc" '.gz' )
            ;;
        *XZ*)
            compression_specs=( "$XZ_CMD -dc" '.xz' )
            ;;
        *Zip*)
            compression_specs=( "$UNZIP_CMD -p" '.zip' )
            ;;
        *Zstandard*)
            compression_specs=( "$ZSTD_CMD -dc" '.zst' )
            ;;
        *'ISO 9660'*|*'DOS/MBR boot sector'*)
            compression_specs=( "$CAT_CMD" '' )
            ;;
        *)
            compression_specs=( 'unknown' 'unknown' )
            ;;
    esac

    if test ."${compression_specs[0]}" = .'unknown'; then
        pr-error "${image}: Unrecognized image."
        return 10
    fi
}

regex-escape ()
{
    local regex=$1

    local escaped=''

    if ! escaped=$($SED_CMD -e 's/[][/\*+.|$]/\\&/g'  <<<"$regex"); then
        pr-error "${FUNCNAME[0]}: ${backing_image}: Escape failed."
        return 1
    fi

    echo "$escaped"
}

decompress-image ()
{
    local compressed_image=$1
    local -n compression_specs=$2
    local -n tmpfile=$3
    local -n backing_images=$4

    if test ."${parameters[shared-cache]}" = .'true'; then
        # Check $MOUNT_IMAGE_CACHE for existing decompressed image(s).
        if test -f "$MOUNT_IMAGE_CACHE"; then
            local image_escaped=''

            image_escaped=$(regex-escape "$compressed_image") || return $?
            mapfile -t backing_images < <(
                $SUDO_CMD $SED_CMD -En -e '/[[:space:]]+'"$image_escaped"'$/s/[[:space:]]+.*$//p' "$MOUNT_IMAGE_CACHE"
            )

            for i in $($SEQ_CMD $(( ${#backing_images[*]} - 1 )) -1 0); do
                if test -f "${backing_images[i]}"; then
                    tmpfile=${backing_images[i]}
                    break
                else
                    # Remove stale image from cache.
                    image_escaped=$(regex-escape "${backing_image[i]}") || return $?
                    $SUDO_CMD $SED_CMD -Ei -e '/^'"$image_escaped"'[[:space:]]+/d' "$MOUNT_IMAGE_CACHE"
                fi
            done
        fi
    fi

    if test ."$tmpfile" = .''; then
        tmpfile=$($MKTEMP_CMD "${compressed_image%${compression_specs[1]}}.XXXXX") || return $?

        trap '$RM_CMD -f "$tmpfile"' 0 1 2 15 RETURN

        pr-info "${script_name}: ${compressed_image}: Decompressing.  Please wait..."
        ${compression_specs[0]} "$compressed_image" >"$tmpfile" || return $?

        trap - 0 1 2 15 RETURN
    fi
}

log-restore-method ()
{
    local image=$1
    local compressor=$2
    local compressed_image=$3

    $SUDO_CMD $BASH_CMD -c "
            $INSTALL_CMD -d -m 0755 '${MOUNT_IMAGE_CACHE%/*}/'
            {
               $FLOCK_CMD 3
               printf '${image}\\t${compressor}\\t${compressed_image}\\n' >&3
            } 3>>'$MOUNT_IMAGE_CACHE'" || return $?
}

loop-attach-image ()
{
    local image=$1

    local device=''
    local attached_device=''

    if ! attached_device=$(
        $LOSETUP_CMD -lJ |
            $JQ_CMD -r '.loopdevices |
                .[] |
                select( ."back-file" == "'"$image"'" ) |
                .name'
         ); then
        pr-error "${FUNCNAME[0]}: Loop-device query failed."
        return 20
    elif test ."${parameters[shared-cache]}" != .'true' -a ."$attached_device" != .''; then
        pr-error "${FUNCNAME[0]}: ${attached_device}: Image already attached to loop device."
        return 21
    elif ! device=$(
            $SUDO_CMD $LOSETUP_CMD --sector-size 512  --nooverlap \
                      --find --show "$image"
         ); then
        pr-error "${FUNCNAME[0]}: ${image}: Loop-device attach failed."
        return 22
    fi

    echo "$device"
}

maybe-decompress-image ()
{
    local image=$1

    local -a specs=()

    get-compression-specs "$image" specs || return $?

    if test ."${specs[0]}" != ."$CAT_CMD"; then
        local -a decompressed_images=()
        local -a existing_images=()
        local decompressed_image=''

        decompress-image "$image" specs decompressed_image existing_images || return $?
        if (( ${#existing_images[*]} == 0 )); then
            log-restore-method "$decompressed_image" "${specs[0]%% *}" "$image" || return $?
        fi

        image=$decompressed_image
    fi

    echo $image
}

next-free-path ()
{
    local base=$1

    local next=$base
    local -i i=0

    while test -e "$next"; do
        next=${base}$(( ++i ))
    done

    echo "$next"
}

mount-filesystem ()
{
    local device=$1

    local label=''
    local mount_point=''

    label=$($LSBLK_CMD -no LABEL "$device") || return $?

    if test ."$label" != .''; then
        mount_point=$(next-free-path "${MOUNT_IMAGE_BASEDIR}/${label}")
    else
        mount_point=$(next-free-path "${MOUNT_IMAGE_BASEDIR}/${device##*/}")
    fi

    if test ."$mount_point" = .''; then
        pr-error "${FUNCNAME[0]}: Create mount point failed."
        return 1
    elif $FINDMNT_CMD "$mount_point" >/dev/null; then
        pr-error "${FUNCNAME[0]}: ${mount_point}: Cannot overwrite."
        return 2
    elif ! $SUDO_CMD $INSTALL_CMD -d -m 0700 -o "$USER" "$mount_point"; then
        pr-error "${FUNCNAME[0]}: ${mount_point}: Permission denied."
        return 3
    fi

    $SUDO_CMD $MOUNT_CMD "$device" "$mount_point"

    echo "$mount_point"
}

mount-lvm2 ()
{
    local partition=$1

    $SUDO_CMD $KPARTX_CMD -a "$partition"

    local -a volume_groups=()

    mapfile -t volume_groups < <(
        $SUDO_CMD $VGS_CMD --noheadings -o vg_name --devices "$partition" |
            $TR_CMD -d ' '
    )

    local volume_group=''

    for volume_group in "${volume_groups[@]}"; do
        $SUDO_CMD $VGCHANGE_CMD -ay "$volume_group"

        local -a lv_paths=()

        mapfile -t lv_paths< <(
            $SUDO_CMD $LVS_CMD --noheadings -o lv_path --devices "$partition" "$volume_group" |
                $TR_CMD -d ' '
        )

        local lv_path=''

        for lv_path in "${lv_paths[@]}"; do
            fstype=($LSBLK_CMD -no FSTYPE "$lv_path")

            if test ."$fstype" = .'' -o ."$fstype" = .'swap'; then
                continue
            fi

            mount-filesystem "$lv_path"
        done
    done
}

mount-device-partitions ()
{
    local device=$1

    local partition=''
    local -a partitions=()

    $SUDO_CMD $PARTPROBE_CMD "$device"
    $SLEEP_CMD 1
    mapfile -t partitions < <(printf '%s\n' "${device}p"*)

    for partition in "${partitions[@]}"; do
        local mount_point=''
        local -a fstypes=()
        local fstype=''

        mapfile -t fstypes < <(
            $LSBLK_CMD -no FSTYPE "$partition" |
                $SED_CMD -e '/^$/d'
        )

        if (( ${#fstypes[*]} > 1 )); then
            # Previously attached LVM2 volume.
            fstype=LVM2_member
        else
            fstype=${fstypes[0]}
        fi

        if test ."$fstype" = .'' -o ."$fstype" = .'swap'; then
            continue
        fi

        case "$fstype" in
            *swap|'')
                continue
                ;;
            LVM2_member)
                if ! mount_point=$(mount-lvm2 "$partition"); then
                    pr-error "${FUNCNAME[0]}: ${partition}: LVM2 mount failed."
                    continue
                fi
                ;;
            *)
                if ! mount_point=$(mount-filesystem "$partition"); then
                    pr-error "${FUNCNAME[0]}: ${partition}: Mount failed."
                    continue
                fi
                ;;
        esac

        pr-info "$mount_point"
    done
}

get-mounted-device ()
{
    local mount_point=$1

    local device=''

    if ! device=$($FINDMNT_CMD -no SOURCE "$mount_point"); then
        pr-error "${FUNCNAME[0]}: ${mount_point}: Invalid mount point."
        return 40
    fi

    echo "$device"
}

get-backing-image ()
{
    local device=$1

    local backing_image=''

    if ! backing_image=$($LOSETUP_CMD -nO BACK-FILE "$device"); then
        pr-error "${FUNCNAME[0]}: ${device}: Invalid loop device."
        return 50
    fi

    echo "$backing_image"
}

umount-filesystem ()
{
    local partition=$1
    local -n mounts=$2

    local mount_point=''

    for mount_point in "${mounts[@]}"; do
        if test ."$mount_point" = .''; then
            pr-warn "${FUNCNAME[0]}: ${partition}: Empty mount point."
        elif ! $SUDO_CMD $UMOUNT_CMD -f "$mount_point"; then
            pr-error "${FUNCNAME[0]}: ${mount_point}: Umount failed."
            return 61
        elif ! $SUDO_CMD $RMDIR_CMD "$mount_point"; then
            pr-error "${FUNCNAME[0]}: ${mount_point}: Permission denied."
            return 62
        fi
    done
}

umount-lvm2 ()
{
    local partition=$1
    local -n _mount_points=$2

    mapfile -t volume_groups < <(
        $SUDO_CMD $VGS_CMD --noheadings -o vg_name --devices "$partition" |
            $TR_CMD -d ' '
    )

    local volume_group=''

    for volume_group in "${volume_groups[@]}"; do
        local -a lv_paths=()

        mapfile -t lv_paths< <(
            $SUDO_CMD $LVS_CMD --noheadings -o lv_path --devices "$partition" "$volume_group" |
                $TR_CMD -d ' '
        )

        local lv_path=''

        for lv_path in "${lv_paths[@]}"; do
            local fstype=''

            fstype=($LSBLK_CMD -no FSTYPE "$lv_path") || continue

            if test ."$fstype" = .'' -o ."$fstype" = .'swap'; then
                continue
            fi

            umount-filesystem "$lv_path" _mount_points || return $?

            local dm_device=''

            dm_device=$($READLINK_CMD -e "$lv_path") || continue
            $SUDO_CMD $DMSETUP_CMD remove "$dm_device" || return $?
        done
    done
}

umount-device-partitions ()
{
    local device=$1

    for part in p{1..9}; do
        test -b "${device}${part}" || continue

        local -a mount_points=()

        mapfile -t mount_points < <(
            $LSBLK_CMD -no MOUNTPOINTS "${device}${part}" |
                $SED_CMD -e '/^$/d'
        )

        if (( ${#mount_points[*]} > 1 )); then
            if ! verify-input "${FUNCNAME[0]}: ${device}${part}: Unmount multiple mount points? "; then
                return 70
            fi
        fi

        local -a fstypes=()
        local fstype=''

        mapfile -t fstypes < <(
            $LSBLK_CMD -no FSTYPE "${device}${part}" |
                $SED_CMD -e '/^$/d'
        )

        if (( ${#fstypes[*]} > 1 )); then
            # Previously attached LVM2 volume.
            fstype=LVM2_member
        else
            fstype=${fstypes[0]}
        fi

        case "$fstype" in
            '')
                continue
                ;;
            LVM2_member)
                umount-lvm2 "${device}${part}" mount_points || return $?
                ;;
            *)
                umount-filesystem "${device}${part}" mount_points || return $?
                ;;
        esac
    done
}

detach-device ()
{
    local device=$1

    if test -b "$device"; then
        if ! $SUDO_CMD $LOSETUP_CMD -d "$device" &>/dev/null; then
            pr-error "${FUNCNAME[0]}: ${device}: Loop detach failed."
            return 30
        fi
    fi
}

umount-image-by-mount-point ()
{
    local mount_point=$1

    local device=''
    local backing_image=''

    device=$(get-mounted-device "$mount_point") || return $?

    local base_device=''

    base_device=${device%p+([0-9])}

    backing_image=$(get-backing-image "$base_device") || return $?
    umount-device-partitions "$base_device" || return $?
    detach-device "$base_device" || return $?
    echo "$backing_image"
}

get-image-device ()
{
    local image=$1

    local -a devices=()

    mapfile -t devices < <(
        $LOSETUP_CMD -lJ  |
            $JQ_CMD -r '.loopdevices |
                .[] |
                select(
                    ."back-file" |
                     startswith("'"$image"'")
                ) | .name'
        )

    if (( ${#devices[*]} > 1 )); then
        pr-error "${FUNCNAME[0]}: ${image}: Ambiguous - use mount point instead."
        return 71
    elif (( ${#devices[*]} < 1 )); then
        pr-error "${FUNCNAME[0]}: ${image}: Not loop attached."
        return 72
    fi

    echo "${devices[0]}"
}

umount-image ()
{
    local image=$1

    local -a specs=()

    get-compression-specs "$image" specs || return $?

    if test ."${specs[0]}" != ."$CAT_CMD"; then
        image=${image%${specs[1]}}
    fi

    local device=''

    device=$(get-image-device "$image") || return $?
    umount-device-partitions "$device" || return $?

    local backing_image=''

    backing_image=$(get-backing-image "$device") || return $?
    detach-device "$device" || return $?

    echo "$backing_image"
}

maybe-compress-image ()
{
    local backing_image=$1

    local -a restore_parameters=()
    local backing_image_escaped=''

    backing_image_escaped=$(regex-escape "$backing_image") || return $?

    # Assert: $backing_image exists in $MOUNT_IMAGE_CACHE
    mapfile -t restore_parameters < <(
        $SUDO_CMD $ED_CMD -Es "$MOUNT_IMAGE_CACHE" <<EOF
g;^$backing_image_escaped[[:space:]]+;\\
s;;;\\
s;[[:space:]]+;\\
;
-,.p
-,.d
wq
EOF
    )

    if (( ${#restore_parameters[*]} > 0 )); then
        pr-info "${script_name}: ${restore_parameters[1]%.*}: Compressing. Please wait..."
        ${restore_parameters[0]} "$backing_image" || return $?

        local extension=.${restore_parameters[1]##*.}

        $MV_CMD -f "${restore_parameters[1]}" "${restore_parameters[1]}.old" || return $?
        $MV_CMD -f "${backing_image}${extension}" "${restore_parameters[1]}" || return $?

        # zstd, e.g., does not remove original.
        $RM_CMD -f "$backing_image"
    fi
}

if test ."$0" = ."${BASH_SOURCE[0]}"; then
    shopt -s extglob

    declare script_name=${0##*/}
    declare -A parameters=( [shared-cache]=false )
    declare -i exit_status=0

    case "$0" in
        */mount.image)
            declare image=''
            declare device=''

            if (( $# == 0 )); then
                pr-info "Usage: ${script_name} disk-image [...]"
                exit 1
            fi

            $SUDO_CMD $INSTALL_CMD -d -m 0755 -o root -g root "$MOUNT_IMAGE_BASEDIR" || exit 1

            for image in "$@"; do
                if ! image=$(resolve-existing "$image"); then
                    pr-error "${script_name}: ${image}: No such file or directory."
                    (( ++exit_status ))
                    continue
                elif ! image=$(maybe-decompress-image "$image"); then
                    pr-error "${script_name}: ${image}: Decompress failed."
                    (( ++exit_status ))
                    continue
                elif ! device=$(loop-attach-image "$image"); then
                    pr-error "${script_name}: ${image}: Loop attach failed."
                    (( ++exit_status ))
                    continue
                fi
                mount-device-partitions "$device" || exit $?
            done
            ;;
        */umount.image)
            declare path=''
            declare backing_image=''

            if (( $# == 0 )); then
                pr-info "Usage: ${script_name} disk-image | mount-point [...]"
                exit 1
            fi

            for path in "$@"; do
                if ! path=$(resolve-existing "$path"); then
                    pr-error "${script_name}: ${path}: No such file or directory."
                    (( ++exit_status ))
                    continue
                elif test -f "$path"; then
                    backing_image=$(umount-image "$path") || exit $?
                elif test -d "$path"; then
                    backing_image=$(umount-image-by-mount-point "$path") || exit $?
                else
                    pr-error "${script_name}: ${path}: Unsupported file type."
                    (( ++exit_status ))
                    continue
                fi

                if test -f "$MOUNT_IMAGE_CACHE"; then
                    declare backing_image_escaped=''

                    if ! backing_image_escaped=$(regex-escape "$backing_image"); then
                        (( ++exit_status ))
                        continue
                    fi

                    if $GREP_CMD -Eq '^'"$backing_image_escaped"'[[:space:]]+' "$MOUNT_IMAGE_CACHE" 2>/dev/null; then
                        maybe-compress-image "$backing_image" || exit $?
                    fi
                fi
            done
            ;;
    esac
    exit $exit_status
fi
